{
    "version": "https://jsonfeed.org/version/1",
    "title": "HYXC • All posts by \"使用教程\" tag",
    "description": "逆水行舟,不进则退",
    "home_page_url": "https://haoyuxingchen.github.io",
    "items": [
        {
            "id": "https://haoyuxingchen.github.io/2023/07/09/CIFAR%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8-%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E6%98%BE%E7%A4%BA%E3%80%81%E5%8F%A6%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87/",
            "url": "https://haoyuxingchen.github.io/2023/07/09/CIFAR%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8-%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E6%98%BE%E7%A4%BA%E3%80%81%E5%8F%A6%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87/",
            "title": "CIFAR数据集使用(介绍、下载读取、可视化显示、另存为图片)",
            "date_published": "2023-07-09T11:18:19.000Z",
            "content_html": "<h1 id=\"cifar10数据集\"><a class=\"markdownIt-Anchor\" href=\"#cifar10数据集\">#</a> cifar10 数据集</h1>\n<p><a href=\"https://blog.csdn.net/qq_40755283/article/details/125209463\">参考</a></p>\n<h2 id=\"数据集介绍\"><a class=\"markdownIt-Anchor\" href=\"#数据集介绍\">#</a> 数据集介绍</h2>\n<p>CIFAR-10 是由 Hinton 的学生 Alex Krizhevsky 和 Ilya Sutskever 整理的一个用于识别普适物体的小型数据集。一共包含 10 个类别的 RGB 彩色图 片：飞机（ airplane ）、汽车（ automobile ）、鸟类（ bird ）、猫（ cat ）、鹿（ deer ）、狗（ dog ）、蛙类（ frog ）、马（ horse ）、船（ ship ）和卡车（ truck ）。图片的尺寸为 32×32 ，数据集中一共有 50000 张训练图片和 10000 张测试图片。</p>\n<p><strong>与 MNIST 数据集中目比， CIFAR-10 具有以下不同点：</strong></p>\n<p>CIFAR-10 是 3 通道的彩色 RGB 图像，而 MNIST 是灰度图像。<br>\nCIFAR-10 的图片尺寸为 32×32， 而 MNIST 的图片尺寸为 28×28，比 MNIST 稍大。<br>\n相比于手写字符， CIFAR-10 含有的是现实世界中真实的物体，不仅噪声很大，而且物体的比例、 特征都不尽相同，这为识别带来很大困难。 直接的线性模型如 Softmax 在 CIFAR-10 上表现得很差</p>\n<h2 id=\"数据集下载\"><a class=\"markdownIt-Anchor\" href=\"#数据集下载\">#</a> 数据集下载</h2>\n<p>官方下载地址：（共有三个版本：python，matlab，binary version 适用于 C 语言）</p>\n<p><a href=\"http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\">http://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz</a></p>\n<p><a href=\"http://www.cs.toronto.edu/~kriz/cifar-10-matlab.tar.gz\">http://www.cs.toronto.edu/~kriz/cifar-10-matlab.tar.gz</a></p>\n<p><a href=\"http://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz\">http://www.cs.toronto.edu/~kriz/cifar-10-binary.tar.gz</a></p>\n<p>数据集目录结构<br>\n 5 个训练批次 + 1 个测试批次，每一批 10000 张图片。</p>\n<p>测试批次包含 10000 张图片，是由每一类图片随机抽取出 1000 张组成的集合。</p>\n<p>训练批次是由剩下的 50000 张图片打乱顺序，然后<strong>随机分成 5 份</strong>，所以可能某个训练批次中 10 个种类的图片数量不是对等的，会出现一个类的图片数量比另一类多的情况</p>\n<p><img src=\"CIFAR%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8-%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E6%98%BE%E7%A4%BA%E3%80%81%E5%8F%A6%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87/image-20230709180752904.png\" alt=\"image-20230709180752904\"></p>\n<h2 id=\"本地数据集导入\"><a class=\"markdownIt-Anchor\" href=\"#本地数据集导入\">#</a> 本地数据集导入</h2>\n<h3 id=\"本地导入\"><a class=\"markdownIt-Anchor\" href=\"#本地导入\">#</a> <strong>本地导入</strong></h3>\n<pre class=\"line-numbers language-python3\" data-language=\"python3\"><code class=\"language-python3\">import numpy as np\nimport cv2\n\n# 示例函数\n# def unpickle(file):\n#     import pickle\n#     with open(file, &#39;rb&#39;) as fo:\n#         dict &#x3D; pickle.load(fo, encoding&#x3D;&#39;bytes&#39;)\n#     return dict\n\n# 打开cifar-10数据集文件目录\ndef unpickle(file):\n    import pickle\n    with open(&quot;D:&#x2F;projects&#x2F;CIFAR-10&#x2F;官方数据集&#x2F;cifar-10-python&#x2F;cifar-10-batches-py&#x2F;&quot;+file, &#39;rb&#39;) as fo:\n        dict &#x3D; pickle.load(fo, encoding&#x3D;&#39;bytes&#39;)\n    return dict\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>选取 data_batch_1 可视化其中一张图</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#打开cifar-10文件的data_batch_1\ndata_batch&#x3D;unpickle(&quot;data_batch_1&quot;)\n\n# data_batch为字典，包含四个字典键：\n# b&#39;batch_label&#39; \n# b&#39;labels&#39; 标签\n# b&#39;data&#39;  图片像素值\n# b&#39;filenames&#39;\n\ndata_batch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>打印可看到以下结果：</p>\n<p><img src=\"CIFAR%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8-%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E6%98%BE%E7%A4%BA%E3%80%81%E5%8F%A6%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87/image-20230709185729743.png\" alt=\"image-20230709185729743\"></p>\n<p>一批次的数据集中有 4 个字典键，我们需要用到的就是 <strong>数据标签</strong> 和 <strong>数据内容（10000×32×32×3，10000 张 32×32 大小为 rgb 三通道的图片）</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">cifar_label&#x3D;data_batch[b&#39;labels&#39;]\ncifar_data&#x3D;data_batch[b&#39;data&#39;]\n\n#把字典的值转成array格式，方便操作\ncifar_label&#x3D;np.array(cifar_label)\nprint(cifar_label.shape)\ncifar_data&#x3D;np.array(cifar_data)\nprint(cifar_data.shape)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(10000,)\n(10000, 3072)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>给 0-9 十个数字标签 手动打上文字标签</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">label_name&#x3D;[&#39;airplane&#39;,&#39;automobile&#39;,&#39;brid&#39;,&#39;cat&#39;,&#39;deer&#39;,&#39;dog&#39;,&#39;frog&#39;,&#39;horse&#39;,&#39;ship&#39;,&#39;truck&#39;]\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意事项以及重点：</p>\n<p>导包 matplotlib.pyplot ，由于环境用的 jupyter notebook，还要在里面能显示，还得加上 % matplotlib inline<br>\ncifar_data [1] 是长度为 3072 的数据，为数据集中第 2 张图片<br>\n reshap () 函数参数 - 1 的意思是一个未知量，将其他矩阵维度输入后会自动生成一个完整矩阵<br>\n数组的排序方式是依次按照 r,g,b 三通道，不是之前某个地方学到的 b,g,r 的顺序<br>\n最坑的地方以为 cv2 可以直接读取 numpy 数组，结果发现要归一化才能读！！！</p>\n<h3 id=\"显示图片\"><a class=\"markdownIt-Anchor\" href=\"#显示图片\">#</a> 显示图片</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 拿第2个图片的np矩阵举例，将rgb矩阵转换为可显示图片\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimage &#x3D; cifar_data[1]\n# 分离出r,g,b：3*1024\nimage &#x3D; image.reshape(-1,1024)\nr &#x3D; image[0,:].reshape(32,32) #红色分量\ng &#x3D; image[1,:].reshape(32,32) #绿色分量\nb &#x3D; image[2,:].reshape(32,32) #蓝色分量\n\n# 特别注意点：cv2模块可以接受numpy数组,需要注意的是将 0-255 归一化到 0-1 ！！！\n# 因此,您应该在代码中除以255\n\nimg &#x3D; np.zeros((32,32,3))\nimg[:,:,0]&#x3D;r&#x2F;255\nimg[:,:,1]&#x3D;g&#x2F;255\nimg[:,:,2]&#x3D;b&#x2F;255\n\nplt.imshow(img)\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"CIFAR%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BD%BF%E7%94%A8-%E4%BB%8B%E7%BB%8D%E3%80%81%E4%B8%8B%E8%BD%BD%E8%AF%BB%E5%8F%96%E3%80%81%E5%8F%AF%E8%A7%86%E5%8C%96%E6%98%BE%E7%A4%BA%E3%80%81%E5%8F%A6%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87/image-20230709190518314.png\" alt=\"image-20230709190518314\"></p>\n<h3 id=\"另存为图片\"><a class=\"markdownIt-Anchor\" href=\"#另存为图片\">#</a> 另存为图片</h3>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 参考代码\nimport numpy as np\nimport cv2\n\ndef unpickle(file):#打开cifar-10文件的其中一个batch（一共5个batch）\n    import pickle\n    with open(&quot;E:&#x2F;file&#x2F;study&#x2F;深度学习&#x2F;数据集&#x2F;CIFAR-10&#x2F;cifar-10-batches-py&#x2F;&quot;+file, &#39;rb&#39;) as fo:\n     dict &#x3D; pickle.load(fo, encoding&#x3D;&#39;bytes&#39;)\n    return dict\n\ndata_batch&#x3D;unpickle(&quot;data_batch_2&quot;)#打开cifar-10文件的data_batch_1\ncifar_data&#x3D;data_batch[b&#39;data&#39;]#这里每个字典键的前面都要加上b\ncifar_label&#x3D;data_batch[b&#39;labels&#39;]\ncifar_data&#x3D;np.array(cifar_data)#把字典的值转成array格式，方便操作\nprint(cifar_data.shape)#(10000,3072)\ncifar_label&#x3D;np.array(cifar_label)\nprint(cifar_label.shape)#(10000,)\n\nlabel_name&#x3D;[&#39;airplane&#39;,&#39;automobile&#39;,&#39;brid&#39;,&#39;cat&#39;,&#39;deer&#39;,&#39;dog&#39;,&#39;frog&#39;,&#39;horse&#39;,&#39;ship&#39;,&#39;truck&#39;]\n\ndef imwrite_images(k):#k的值可以选择1-10000范围内的值\n    for i in range(k):\n        image&#x3D;cifar_data[i]\n        image&#x3D;image.reshape(-1,1024)\n        r&#x3D;image[0,:].reshape(32,32)#红色分量\n        g&#x3D;image[1,:].reshape(32,32)#绿色分量\n        b&#x3D;image[2,:].reshape(32,32)#蓝色分量\n        img&#x3D;np.zeros((32,32,3))\n        #RGB还原成彩色图像\n        img[:,:,0]&#x3D;r\n        img[:,:,1]&#x3D;g\n        img[:,:,2]&#x3D;b\n        cv2.imwrite(&quot;E:&#x2F;file&#x2F;study&#x2F;深度学习&#x2F;数据集&#x2F;CIFAR-10&#x2F;cifar-10-batches-py&#x2F;图片&#x2F;&quot;+&quot;NO.&quot;+str(i)+&quot;class&quot;+str(cifar_label[i])+str(label_name[cifar_label[i]])+&quot;.jpg&quot;,img)\n    print(&quot;%d张图片保存完毕&quot;%k)\n\nimwrite_images(100)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n",
            "tags": [
                "cifar",
                "使用教程"
            ]
        }
    ]
}